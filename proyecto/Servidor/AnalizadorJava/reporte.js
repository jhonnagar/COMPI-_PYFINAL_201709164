/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var reporte = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[5,7,12],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[8,11,18,63,64,65,66,67],$Vb=[1,26],$Vc=[1,28],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,29],$Vh=[1,35],$Vi=[13,19,24,50,51,69],$Vj=[8,11,18,19,27,30,31,32,35,38,39,40,41,42,62,63,64,65,66,67,70,71,77,78,79,80,81],$Vk=[1,41],$Vl=[1,37],$Vm=[1,38],$Vn=[1,40],$Vo=[1,39],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[21,24],$Vu=[2,14],$Vv=[1,60],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[13,21,24,46,54,55,56,57,58,59,60,61,70,72,73,74,75,76],$VC=[1,65],$VD=[1,74],$VE=[1,81],$VF=[1,79],$VG=[13,21,24,46,54,55,56,57,58,59,60,61,70,74,75,76],$VH=[13,21,24,46,54,55,56,57,58,59,60,61,70,76],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[13,21,24,54,55,56,57,58,59,60,61],$VR=[2,66],$VS=[1,102],$VT=[1,100],$VU=[1,103],$VV=[1,104],$VW=[1,105],$VX=[1,106],$VY=[1,107],$VZ=[1,108],$V_=[1,109],$V$=[1,110],$V01=[1,111],$V11=[8,11,27,30,31,32,35,38,39,40,41,42,63,64,65,66,67],$V21=[1,138],$V31=[13,21,24,54,56,58,59],$V41=[13,21,24,54,55,56,57,58,59],$V51=[13,21,24,58,59],$V61=[1,146],$V71=[8,19,62,70,71,77,78,79,80,81],$V81=[1,175],$V91=[1,176],$Va1=[1,181],$Vb1=[1,182],$Vc1=[11,45,48],$Vd1=[2,54],$Ve1=[1,188],$Vf1=[1,196],$Vg1=[1,194],$Vh1=[1,197],$Vi1=[1,198],$Vj1=[1,199],$Vk1=[1,200],$Vl1=[1,201],$Vm1=[1,202],$Vn1=[1,203],$Vo1=[1,204],$Vp1=[8,27,30,31,32,35,38,39,40,41,42,63,64,65,66,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"tclass":7,"id":8,"llavea":9,"cuerpo":10,"llavec":11,"timport":12,"puntocoma":13,"cuerpoc":14,"tipoDato":15,"ids":16,"valores":17,"tvoid":18,"para":19,"parametro":20,"parc":21,"cuerpovoid":22,"funcion":23,"coma":24,"parametrox":25,"cuerpovoidx":26,"tif":27,"condicion":28,"elses":29,"twhile":30,"tdo":31,"tfor":32,"idfor":33,"cambioid":34,"tswitch":35,"EXP":36,"casos":37,"tprint":38,"tprintln":39,"tcontinue":40,"tbreak":41,"treturn":42,"treturnc":43,"nuevocaso":44,"tcase":45,"dospuntos":46,"cuerpocase":47,"tdefault":48,"cuerpocasex":49,"taumen":50,"tdecren":51,"telse":52,"tipodeelse":53,"tmayor":54,"tmayori":55,"tmenor":56,"tmenori":57,"igualdad":58,"noigualdad":59,"tand":60,"tor":61,"tnot":62,"tint":63,"tstring":64,"tboolean":65,"tdouble":66,"tchar":67,"idr":68,"tigual":69,"tresta":70,"entero":71,"tpoten":72,"tmodul":73,"tdiv":74,"tmul":75,"tsuma":76,"decimal":77,"cadena":78,"char":79,"ttrue":80,"tfalse":81,"idx":82,"idex":83,"idxr":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tclass",8:"id",9:"llavea",11:"llavec",12:"timport",13:"puntocoma",18:"tvoid",19:"para",21:"parc",24:"coma",27:"tif",30:"twhile",31:"tdo",32:"tfor",35:"tswitch",38:"tprint",39:"tprintln",40:"tcontinue",41:"tbreak",42:"treturn",45:"tcase",46:"dospuntos",48:"tdefault",50:"taumen",51:"tdecren",52:"telse",54:"tmayor",55:"tmayori",56:"tmenor",57:"tmenori",58:"igualdad",59:"noigualdad",60:"tand",61:"tor",62:"tnot",63:"tint",64:"tstring",65:"tboolean",66:"tdouble",67:"tchar",69:"tigual",70:"tresta",71:"entero",72:"tpoten",73:"tmodul",74:"tdiv",75:"tmul",76:"tsuma",77:"decimal",78:"cadena",79:"char",80:"ttrue",81:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,3],[10,2],[10,1],[14,3],[14,2],[14,8],[23,5],[20,3],[20,1],[20,0],[25,2],[22,2],[22,1],[26,8],[26,3],[26,2],[26,7],[26,9],[26,11],[26,7],[26,5],[26,5],[26,2],[26,2],[26,2],[37,2],[37,1],[44,6],[44,5],[47,2],[47,1],[49,8],[49,3],[49,2],[49,7],[49,9],[49,11],[49,7],[49,5],[49,5],[49,2],[49,2],[43,2],[43,1],[34,1],[34,1],[33,3],[33,2],[29,2],[29,0],[53,3],[53,8],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,1],[28,3],[15,1],[15,1],[15,1],[15,1],[15,1],[16,3],[16,1],[68,1],[17,1],[17,3],[17,2],[17,2],[17,2],[36,3],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,4],[82,1],[82,0],[83,3],[83,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 6:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 7:
 this.$ = [$$[$0]]; 
break;
case 4:
this.$={text: 'class '+$$[$0-3],children: $$[$0-1]};
break;
case 5:
this.$={text: 'import', children: [{text: $$[$0-1] }]};
break;
case 8: case 19: case 37:
this.$={text:'declaracion '+$$[$0-2],children:[{text:'ids',children:$$[$0-1]},{text:'valores',children:$$[$0]}]};
break;
case 9: case 20: case 38: case 52:
this.$={text:'valor '+$$[$0-1],children:$$[$0]};
break;
case 10:
 this.$={text:'void '+$$[$0-6],children:[{text:'parametro',children:$$[$0-4]},{text:'cuerpo',children:$$[$0-1]}]};
break;
case 11:
 this.$= [{text:'funcion'},{text:'parametro',children:$$[$0-4]},{text:'cuerpo',children:$$[$0-1]}];
break;
case 12: case 73: case 99:
 $$[$0-2].push($$[$0]) ; this.$=$$[$0-2];
break;
case 13: case 17: case 31: case 35: case 74: case 100:
this.$=[$$[$0]];
break;
case 14: case 48: case 54:
this.$="";
break;
case 15:
this.$={text:$$[$0-1],children:[{text:$$[$0]}]}; 
break;
case 16: case 30: case 34:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 18: case 36:
 this.$={text:'IF',children:[{text:' condicion',children:$$[$0-5]},{text:'cuerpo',children:$$[$0-2]},{text:'else',children:$$[$0]}]}; 
break;
case 21: case 39:
 this.$={text:'WHILE',children:[{text:' condicion',children:$$[$0-4]},{text:'cuerpo',children:$$[$0-1]}]}; 
break;
case 22: case 40:
 this.$={text:'do',children:[{text:' cuerpo',children:$$[$0-6]},{text:'condicion',children:$$[$0-2]}]}; 
break;
case 23: case 41:
 this.$={text:'FOR',children:[{text:'variable',children:[$$[$0-8]]},{text:'condicion',children:$$[$0-7]},{text:$$[$0-5],children:[{text:$$[$0-4]}]},{text:'cuerpo',children:$$[$0-1]}]};
break;
case 24: case 42:
this.$={text:'switch',children:[{text:'expresion',children:$$[$0-4]},{text:'casos',children:$$[$0-1]}]};
break;
case 25: case 26: case 43: case 44:
 this.$= {text:'print',children:$$[$0-2]};
break;
case 27: case 45:
this.$={text:'continue'};
break;
case 28:
this.$={text:'break'};
break;
case 29: case 46:
this.$={text:'return',children:$$[$0]}
break;
case 32:
this.$={text:'case',children:[{text:'valor',children:$$[$0-4]},{text:'cuerpo',children:$$[$0-2]}]};
break;
case 33:
this.$={text:'default',children:$$[$0-2]};
break;
case 47: case 55: case 67: case 77:
this.$=$$[$0-1];
break;
case 49: case 50: case 97:
this.$=$$[$0]
break;
case 51:
this.$={text:'declaracion '+$$[$0-2],children:[{text:'id'+$$[$0-1]},{text:'valor',children:$$[$0]}]};
break;
case 53:
 this.$=$$[$0];
break;
case 56:
 this.$=[{text:'IF',children:[{text:' condicion',children:$$[$0-5]},{text:'cuerpo',children:$$[$0-2]},{text:'else',children:$$[$0]}]}]; 
break;
case 57:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'MAYOR'},{text:'der',children:$$[$0]}]; 
break;
case 58:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'MAYOR_IGUAL'},{text:'der',children:$$[$0]}]; 
break;
case 59:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'MENOR'},{text:'der',children:$$[$0]}]; 
break;
case 60:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'MENOR-IGUAL'},{text:'der',children:$$[$0]}]; 
break;
case 61:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'IGUAL'},{text:'der',children:$$[$0]}]; 
break;
case 62:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'NO_IGUAL'},{text:'der',children:$$[$0]}]; 
break;
case 63:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'AND'},{text:'der',children:$$[$0]}]; 
break;
case 64:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'OR'},{text:'der',children:$$[$0]}]; 
break;
case 65:
   this.$=[{text:'not',children:$$[$0]}];
break;
case 66: case 68: case 69: case 70: case 71: case 72: case 78:
this.$=$$[$0];
break;
case 75:
this.$={text:$$[$0]}
break;
case 76:
this.$=" ";
break;
case 79: case 80:
this.$=[{text:$$[$0-1]}];
break;
case 81:
  this.$=$$[$0-1]; 
break;
case 82:
  this.$ = {text:'-'+$$[$0-1]}; 
break;
case 83:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'^'},{text:'der',children:$$[$0]}]; 
break;
case 84:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'%'},{text:'der',children:$$[$0]}]; 
break;
case 85:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'/'},{text:'der',children:$$[$0]}]; 
break;
case 86:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'*'},{text:'der',children:$$[$0]}]; 
break;
case 87:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'+'},{text:'der',children:$$[$0]}]; 
break;
case 88:
  this.$ = [{text:'izq',children:$$[$0-2]},{text:'-'},{text:'der',children:$$[$0]}]; 
break;
case 89:
  this.$ = [{text:$$[$0]}];
break;
case 90: case 91: case 94:
  this.$ = [{text:$$[$0]}]; 
break;
case 92:
  this.$ =[ {text:$$[$0]}]; 
break;
case 93: case 95:
  this.$ =[{text:$$[$0]}]; 
break;
case 96:
  this.$ =[{text:$$[$0-3]}, {text:'parametros',children:$$[$0-1]}];
break;
case 98:
""
break;
case 101:
this.$={text:'parametros',children:$$[$0]};
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,12:$V1},{1:[3]},{5:[1,6],6:7,7:$V0,12:$V1},o($V2,[2,3]),{8:[1,8]},{8:[1,9]},{1:[2,1]},o($V2,[2,2]),{9:[1,10]},{13:[1,11]},{8:$V3,10:12,14:13,15:14,18:$V4,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($V2,[2,5]),{8:$V3,11:[1,22],14:23,15:14,18:$V4,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($Va,[2,7]),{8:$Vb,16:24,68:25},{13:$Vc,17:27,19:$Vd,50:$Ve,51:$Vf,69:$Vg},{8:[1,33]},{8:[2,68]},{8:[2,69]},{8:[2,70]},{8:[2,71]},{8:[2,72]},o($V2,[2,4]),o($Va,[2,6]),{13:$Vc,17:34,19:$Vd,24:$Vh,50:$Ve,51:$Vf,69:$Vg},o($Vi,[2,74]),o($Vi,[2,75]),o($Va,[2,9]),o($Vj,[2,76]),{8:$Vk,19:$Vl,36:36,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($Vt,$Vu,{23:46,20:47,25:48,15:49,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9}),{13:[1,50]},{13:[1,51]},{19:[1,52]},o($Va,[2,8]),{8:$Vb,68:53},{13:[1,54],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},{8:$Vk,19:$Vl,36:61,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{71:[1,62]},o($VB,[2,89]),o($VB,[2,90]),o($VB,[2,91],{19:[1,63]}),o($VB,[2,92]),o($VB,[2,93]),o($VB,[2,94]),o($VB,[2,95]),o($Vj,[2,78]),{21:[1,64],24:$VC},o($Vt,[2,13]),{8:[1,66]},o($Vj,[2,79]),o($Vj,[2,80]),o($Vt,$Vu,{25:48,15:49,20:67,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9}),o($Vi,[2,73]),o($Vj,[2,77]),{8:$Vk,19:$Vl,36:68,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:69,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:70,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:71,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:72,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:73,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{21:$VD,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},o($VB,[2,82]),{8:$Vk,19:$VE,21:[2,98],28:78,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:75,83:76,84:77},{9:[1,82]},{15:49,25:83,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($Vt,[2,15]),{21:[1,84],24:$VC},o($VB,[2,83]),o($VB,[2,84]),o($VG,[2,85],{72:$Vw,73:$Vx}),o($VG,[2,86],{72:$Vw,73:$Vx}),o($VH,[2,87],{72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VH,[2,88],{72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VB,[2,81]),{21:[1,85]},{21:[2,97],24:[1,86]},o($Vt,[2,100]),o($Vt,[2,101],{54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP}),{8:$Vk,19:$VE,28:95,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($VQ,$VR,{70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA}),{8:$Vk,19:$VE,28:96,36:97,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$VS,15:101,22:98,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($Vt,[2,12]),{9:[1,112]},o($VB,[2,96]),{8:$Vk,19:$VE,28:78,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,84:113},{8:$Vk,19:$VE,28:114,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$VE,28:115,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$VE,28:116,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$VE,28:117,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$VE,28:118,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$VE,28:119,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$VE,28:120,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$VE,28:121,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($VQ,[2,65]),{21:[1,122],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},o([54,55,56,57,58,59,60,61],$VR,{21:$VD,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA}),{8:$VS,11:[1,123],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($V11,[2,17]),{19:[1,125]},{8:$Vb,16:126,68:25},{13:$Vc,17:127,19:$Vd,50:$Ve,51:$Vf,69:$Vg},{19:[1,128]},{9:[1,129]},{19:[1,130]},{19:[1,131]},{19:[1,132]},{19:[1,133]},{13:[1,134]},{13:[1,135]},{8:$Vk,13:$V21,19:$Vl,36:137,43:136,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$VS,15:101,22:139,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($Vt,[2,99]),o($V31,[2,57],{55:$VJ,57:$VL,60:$VO,61:$VP}),o($V41,[2,58],{60:$VO,61:$VP}),o($V31,[2,59],{55:$VJ,57:$VL,60:$VO,61:$VP}),o($V41,[2,60],{60:$VO,61:$VP}),o($V51,[2,61],{54:$VI,55:$VJ,56:$VK,57:$VL,60:$VO,61:$VP}),o($V51,[2,62],{54:$VI,55:$VJ,56:$VK,57:$VL,60:$VO,61:$VP}),o($VQ,[2,63]),o($VQ,[2,64]),o($VQ,[2,67]),o($Vj,[2,11]),o($V11,[2,16]),{8:$Vk,19:$VE,28:140,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{13:$Vc,17:141,19:$Vd,24:$Vh,50:$Ve,51:$Vf,69:$Vg},o($V11,[2,20]),{8:$Vk,19:$VE,28:142,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$VS,15:101,22:143,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$V61,15:145,33:144,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vk,19:$Vl,36:147,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:148,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:149,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($V11,[2,27]),o($V11,[2,28]),o($V11,[2,29]),{13:[1,150],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},o($V11,[2,48]),{8:$VS,11:[1,151],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{21:[1,152],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},o($V11,[2,19]),{21:[1,153],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},{8:$VS,11:[1,154],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vk,19:$VE,28:155,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:[1,156]},{13:$Vc,17:157,19:$Vd,50:$Ve,51:$Vf,69:$Vg},{21:[1,158],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},{21:[1,159],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},{21:[1,160],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},o($V11,[2,47]),o($Va,[2,10]),{9:[1,161]},{9:[1,162]},{30:[1,163]},{13:[1,164],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},{13:$Vc,17:165,19:$Vd,50:$Ve,51:$Vf,69:$Vg},o($V71,[2,52]),{9:[1,166]},{13:[1,167]},{13:[1,168]},{8:$VS,15:101,22:169,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$VS,15:101,22:170,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{19:[1,171]},{8:[1,172]},o($V71,[2,51]),{37:173,44:174,45:$V81,48:$V91},o($V11,[2,25]),o($V11,[2,26]),{8:$VS,11:[1,177],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$VS,11:[1,178],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vk,19:$VE,28:179,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{34:180,50:$Va1,51:$Vb1},{11:[1,183],44:184,45:$V81,48:$V91},o($Vc1,[2,31]),{8:$Vk,19:$Vl,36:185,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{46:[1,186]},o($V11,$Vd1,{29:187,52:$Ve1}),o($V11,[2,21]),{21:[1,189],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},{21:[1,190]},{21:[2,49]},{21:[2,50]},o($V11,[2,24]),o($Vc1,[2,30]),{46:[1,191],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},{8:$Vf1,15:195,27:$Vg1,30:$Vh1,31:$Vi1,32:$Vj1,35:$Vk1,38:$Vl1,39:$Vm1,40:$Vn1,42:$Vo1,47:192,49:193,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($V11,[2,18]),{9:[1,206],27:[1,207],53:205},{13:[1,208]},{9:[1,209]},{8:$Vf1,15:195,27:$Vg1,30:$Vh1,31:$Vi1,32:$Vj1,35:$Vk1,38:$Vl1,39:$Vm1,40:$Vn1,42:$Vo1,47:210,49:193,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vf1,15:195,27:$Vg1,30:$Vh1,31:$Vi1,32:$Vj1,35:$Vk1,38:$Vl1,39:$Vm1,40:$Vn1,41:[1,211],42:$Vo1,49:212,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($Vp1,[2,35]),{19:[1,213]},{8:$Vb,16:214,68:25},{13:$Vc,17:215,19:$Vd,50:$Ve,51:$Vf,69:$Vg},{19:[1,216]},{9:[1,217]},{19:[1,218]},{19:[1,219]},{19:[1,220]},{19:[1,221]},{13:[1,222]},{8:$Vk,13:$V21,19:$Vl,36:137,43:223,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($V11,[2,53]),{8:$VS,15:101,22:224,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{19:[1,225]},o($V11,[2,22]),{8:$VS,15:101,22:226,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vf1,15:195,27:$Vg1,30:$Vh1,31:$Vi1,32:$Vj1,35:$Vk1,38:$Vl1,39:$Vm1,40:$Vn1,41:[1,227],42:$Vo1,49:212,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{13:[1,228]},o($Vp1,[2,34]),{8:$Vk,19:$VE,28:229,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{13:$Vc,17:230,19:$Vd,24:$Vh,50:$Ve,51:$Vf,69:$Vg},o($Vp1,[2,38]),{8:$Vk,19:$VE,28:231,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$VS,15:101,22:232,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$V61,15:145,33:233,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vk,19:$Vl,36:234,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:235,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$Vk,19:$Vl,36:236,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},o($Vp1,[2,45]),o($Vp1,[2,46]),{8:$VS,11:[1,237],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vk,19:$VE,28:238,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{8:$VS,11:[1,239],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{13:[1,240]},o($Vc1,[2,33]),{21:[1,241],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},o($Vp1,[2,37]),{21:[1,242],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},{8:$VS,11:[1,243],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vk,19:$VE,28:244,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{21:[1,245],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},{21:[1,246],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},{21:[1,247],70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA},o($V11,[2,55]),{21:[1,248],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},o($V11,[2,23]),o($Vc1,[2,32]),{9:[1,249]},{9:[1,250]},{30:[1,251]},{13:[1,252],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},{9:[1,253]},{13:[1,254]},{13:[1,255]},{9:[1,256]},{8:$VS,15:101,22:257,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$VS,15:101,22:258,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{19:[1,259]},{8:[1,260]},{37:261,44:174,45:$V81,48:$V91},o($Vp1,[2,43]),o($Vp1,[2,44]),{8:$VS,15:101,22:262,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$VS,11:[1,263],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$VS,11:[1,264],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$Vk,19:$VE,28:265,36:80,62:$VF,70:$Vm,71:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs},{34:266,50:$Va1,51:$Vb1},{11:[1,267],44:184,45:$V81,48:$V91},{8:$VS,11:[1,268],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($Vp1,$Vd1,{29:269,52:$Ve1}),o($Vp1,[2,39]),{21:[1,270],54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP},{21:[1,271]},o($Vp1,[2,42]),o($V11,$Vd1,{29:272,52:$Ve1}),o($Vp1,[2,36]),{13:[1,273]},{9:[1,274]},o($V11,[2,56]),o($Vp1,[2,40]),{8:$VS,15:101,22:275,26:99,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},{8:$VS,11:[1,276],15:101,26:124,27:$VT,30:$VU,31:$VV,32:$VW,35:$VX,38:$VY,39:$VZ,40:$V_,41:$V$,42:$V01,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9},o($Vp1,[2,41])],
defaultActions: {6:[2,1],17:[2,68],18:[2,69],19:[2,70],20:[2,71],21:[2,72],181:[2,49],182:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'timprime';
break;
case 4:return 'rnumero';
break;
case 5:return 64;
break;
case 6:return 63;
break;
case 7:return 65;
break;
case 8:return 66;
break;
case 9:return 67;
break;
case 10:return 51;
break;
case 11:return 50;
break;
case 12:return 58;
break;
case 13:return 69;
break;
case 14:return 76;
break;
case 15:return 70;
break;
case 16:return 75;
break;
case 17:return 74;
break;
case 18:return 72;
break;
case 19:return 73;
break;
case 20:return 55;
break;
case 21:return 57;
break;
case 22:return 59;
break;
case 23:return 54;
break;
case 24:return 56;
break;
case 25:return 60;
break;
case 26:return 61;
break;
case 27:return 39;
break;
case 28:return 38;
break;
case 29:return 40;
break;
case 30:return 62;
break;
case 31:return 7;
break;
case 32:return 12;
break;
case 33:return 27;
break;
case 34:return 52;
break;
case 35:return 35;
break;
case 36:return 45;
break;
case 37:return 48;
break;
case 38:return 30;
break;
case 39:return 31;
break;
case 40:return 32;
break;
case 41:return 41;
break;
case 42:return 42;
break;
case 43:return 18;
break;
case 44:return'ttrue';
break;
case 45:return'tfalse';
break;
case 46:return 46;
break;
case 47:return 13;
break;
case 48:return 24;
break;
case 49:return 9;
break;
case 50:return 11;
break;
case 51:return 19;
break;
case 52:return 21;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 79; 
break;
case 55:return 77;
break;
case 56:return 71;
break;
case 57:return 8;
break;
case 58:return 5;
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:imprimir\b)/,/^(?:numero\b)/,/^(?:String\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:--)/,/^(?:\+\+)/,/^(?:==)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:continue\b)/,/^(?:!)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = reporte;
exports.Parser = reporte.Parser;
exports.parse = function () { return reporte.parse.apply(reporte, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}