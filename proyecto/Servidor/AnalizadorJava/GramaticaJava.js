/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,5],$V3=[2,5,7,12],$V4=[1,18],$V5=[1,16],$V6=[1,17],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[2,8,11,18,63,64,65,66,67],$Vd=[2,8],$Ve=[1,29],$Vf=[1,28],$Vg=[1,36],$Vh=[1,31],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,32],$Vm=[1,39],$Vn=[2,13,19,24,50,51,69],$Vo=[2,8,11,18,19,27,30,31,32,35,38,39,40,41,42,62,63,64,65,66,67,70,71,77,78,79,80,81],$Vp=[1,45],$Vq=[1,41],$Vr=[1,42],$Vs=[1,44],$Vt=[1,43],$Vu=[1,46],$Vv=[1,47],$Vw=[1,48],$Vx=[1,49],$Vy=[21,24],$Vz=[2,16],$VA=[1,54],$VB=[1,65],$VC=[1,60],$VD=[1,61],$VE=[1,62],$VF=[1,63],$VG=[1,64],$VH=[13,21,24,46,54,55,56,57,58,59,60,61,70,72,73,74,75,76],$VI=[1,70],$VJ=[1,79],$VK=[1,87],$VL=[1,86],$VM=[1,84],$VN=[13,21,24,46,54,55,56,57,58,59,60,61,70,74,75,76],$VO=[13,21,24,46,54,55,56,57,58,59,60,61,70,76],$VP=[1,93],$VQ=[1,94],$VR=[1,95],$VS=[1,96],$VT=[1,97],$VU=[1,98],$VV=[1,99],$VW=[1,100],$VX=[13,21,24,54,55,56,57,58,59,60,61],$VY=[2,74],$VZ=[1,118],$V_=[1,108],$V$=[1,106],$V01=[1,109],$V11=[1,110],$V21=[1,111],$V31=[1,112],$V41=[1,113],$V51=[1,114],$V61=[1,115],$V71=[1,116],$V81=[1,117],$V91=[2,8,11,27,30,31,32,35,38,39,40,41,42,63,64,65,66,67],$Va1=[1,145],$Vb1=[13,21,24,54,56,58,59],$Vc1=[13,21,24,54,55,56,57,58,59],$Vd1=[13,21,24,58,59],$Ve1=[1,154],$Vf1=[1,153],$Vg1=[2,8,19,62,70,71,77,78,79,80,81],$Vh1=[1,185],$Vi1=[1,183],$Vj1=[1,184],$Vk1=[1,190],$Vl1=[1,191],$Vm1=[2,9,11,45,48],$Vn1=[2,61],$Vo1=[1,197],$Vp1=[1,214],$Vq1=[1,205],$Vr1=[1,203],$Vs1=[1,206],$Vt1=[1,207],$Vu1=[1,208],$Vv1=[1,209],$Vw1=[1,210],$Vx1=[1,211],$Vy1=[1,212],$Vz1=[1,213],$VA1=[2,8,27,30,31,32,35,38,39,40,41,42,63,64,65,66,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"tclass":7,"id":8,"llavea":9,"cuerpo":10,"llavec":11,"timport":12,"puntocoma":13,"cuerpoc":14,"tipoDato":15,"ids":16,"valores":17,"tvoid":18,"para":19,"parametro":20,"parc":21,"cuerpovoid":22,"funcion":23,"coma":24,"parametrox":25,"cuerpovoidx":26,"tif":27,"condicion":28,"elses":29,"twhile":30,"tdo":31,"tfor":32,"idfor":33,"cambioid":34,"tswitch":35,"EXP":36,"casos":37,"tprint":38,"tprintln":39,"tcontinue":40,"tbreak":41,"treturn":42,"treturnc":43,"nuevocaso":44,"tcase":45,"dospuntos":46,"cuerpocase":47,"tdefault":48,"cuerpocasex":49,"taumen":50,"tdecren":51,"telse":52,"tipodeelse":53,"tmayor":54,"tmayori":55,"tmenor":56,"tmenori":57,"igualdad":58,"noigualdad":59,"tand":60,"tor":61,"tnot":62,"tint":63,"tstring":64,"tboolean":65,"tdouble":66,"tchar":67,"idr":68,"tigual":69,"tresta":70,"entero":71,"tpoten":72,"tmodul":73,"tdiv":74,"tmul":75,"tsuma":76,"decimal":77,"cadena":78,"char":79,"ttrue":80,"tfalse":81,"idx":82,"idex":83,"idxr":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tclass",8:"id",9:"llavea",11:"llavec",12:"timport",13:"puntocoma",18:"tvoid",19:"para",21:"parc",24:"coma",27:"tif",30:"twhile",31:"tdo",32:"tfor",35:"tswitch",38:"tprint",39:"tprintln",40:"tcontinue",41:"tbreak",42:"treturn",45:"tcase",46:"dospuntos",48:"tdefault",50:"taumen",51:"tdecren",52:"telse",54:"tmayor",55:"tmayori",56:"tmenor",57:"tmenori",58:"igualdad",59:"noigualdad",60:"tand",61:"tor",62:"tnot",63:"tint",64:"tstring",65:"tboolean",66:"tdouble",67:"tchar",69:"tigual",70:"tresta",71:"entero",72:"tpoten",73:"tmodul",74:"tdiv",75:"tmul",76:"tsuma",77:"decimal",78:"cadena",79:"char",80:"ttrue",81:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,3],[6,1],[10,2],[10,1],[14,3],[14,2],[14,8],[14,1],[23,5],[20,3],[20,1],[20,0],[25,2],[25,1],[22,2],[22,1],[26,8],[26,3],[26,2],[26,7],[26,9],[26,11],[26,7],[26,5],[26,5],[26,2],[26,2],[26,2],[26,1],[37,2],[37,1],[44,6],[44,5],[44,1],[47,2],[47,1],[49,8],[49,3],[49,2],[49,7],[49,9],[49,11],[49,7],[49,5],[49,5],[49,2],[49,2],[49,1],[43,2],[43,1],[34,1],[34,1],[33,3],[33,2],[33,1],[29,2],[29,0],[53,3],[53,8],[53,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,1],[28,3],[28,1],[15,1],[15,1],[15,1],[15,1],[15,1],[16,3],[16,1],[68,1],[68,1],[17,1],[17,3],[17,2],[17,2],[17,2],[17,1],[36,3],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,4],[82,1],[82,0],[83,3],[83,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 7:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 8:
 this.$ = [$$[$0]]; 
break;
case 4:
this.$=instruccionesAPI.class($$[$0-3],$$[$0-1]);
break;
case 5:
this.$=instruccionesAPI.import($$[$0-1]);
break;
case 6: case 12: case 18: case 33: case 38: case 52: case 59: case 64: case 76: case 85: case 91:
 this.$=""; CErrores.Errores.add(new CNodoError.NodoError("SINTACTICO","No se esperaba el token: "+yytext,this._$.first_line,this._$.first_column));  
break;
case 9: case 22: case 42: case 57:
this.$=instruccionesAPI.declaracion($$[$0-2],$$[$0-1],$$[$0]);
break;
case 10: case 23: case 43: case 58:
this.$=instruccionesAPI.variable($$[$0-1],$$[$0]);
break;
case 11:
 this.$= instruccionesAPI.funcionvoid($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 13:
 this.$= instruccionesAPI.funcion($$[$0-4],$$[$0-1]);
break;
case 14: case 82: case 110:
 $$[$0-2].push($$[$0]) ; this.$=$$[$0-2];
break;
case 15: case 20: case 35: case 40: case 83: case 111:
this.$=[$$[$0]];
break;
case 16: case 54: case 61:
this.$="";
break;
case 17:
this.$=instruccionesAPI.parametro($$[$0-1],$$[$0]); 
break;
case 19: case 34: case 39:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 21: case 41: case 63:
 this.$=instruccionesAPI.nuevoif($$[$0-5],$$[$0-2],$$[$0]); 
break;
case 24: case 44:
 this.$=instruccionesAPI.nuevowhile($$[$0-4],$$[$0-1]); 
break;
case 25: case 45:
 this.$=instruccionesAPI.nuevodo($$[$0-6],$$[$0-2]);
break;
case 26: case 46:
 this.$=instruccionesAPI.nuevofor($$[$0-8],$$[$0-7],$$[$0-4],$$[$0-1]);
break;
case 27: case 47:
this.$=instruccionesAPI.nuevoswitch($$[$0-4],$$[$0-1]);
break;
case 28: case 48:
 this.$= instruccionesAPI.nuevoprint ($$[$0-2]);
break;
case 29: case 49:
 this.$= instruccionesAPI.nuevoprintln ($$[$0-2]);
break;
case 30: case 50:
this.$=instruccionesAPI.nuevocontinue();
break;
case 31:
this.$=instruccionesAPI.nuevobreak();
break;
case 32: case 51:
this.$=instruccionesAPI.nuevoreturn($$[$0]);
break;
case 36:
this.$=instruccionesAPI.nuevocase($$[$0-4],$$[$0-2]);
break;
case 37:
this.$=instruccionesAPI.nuevodefcase($$[$0-2]);
break;
case 53: case 75: case 87:
this.$=$$[$0-1];
break;
case 55: case 56: case 108:
this.$=$$[$0]
break;
case 60:
 this.$=$$[$0];
break;
case 62:
this.$= instruccionesAPI.nuevoelse($$[$0-1]);
break;
case 65:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORQUE); 
break;
case 66:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORIGUAL); 
break;
case 67:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORQUE); 
break;
case 68:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORIGUAL); 
break;
case 69:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIGUAL); 
break;
case 70:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NOIGUAL); 
break;
case 71:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 72:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 73:
   this.$=instruccionesAPI.nuevonot($$[$0]);
break;
case 74: case 77: case 78: case 79: case 80: case 81: case 88:
this.$=$$[$0];
break;
case 84:
this.$=instruccionesAPI.nuevoid(this.$=$$[$0]);
break;
case 86:
this.$=" ";
break;
case 89: case 90:
this.$=1
break;
case 92:
  this.$=$$[$0-1]; 
break;
case 93:
  this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERONEG);  
break;
case 94:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA); 
break;
case 95:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO); 
break;
case 96:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 97:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 98:
  this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 99:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 100:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 101:
  this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO);  
break;
case 102:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.ID);  
break;
case 103:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA);  
break;
case 104:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CHAR);  
break;
case 105: case 106:
  this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOL);  
break;
case 107:
  this.$ = instruccionesAPI.nuevalorfunc($$[$0-3],$$[$0-1]);  
break;
case 109:
""
break;
case 112:
this.$=instruccionesAPI.nuevoid($$[$0]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:$V2},{1:[3]},{2:$V0,5:[1,7],6:8,7:$V1,12:$V2},o($V3,[2,3]),{8:[1,9]},{8:[1,10]},o($V3,[2,6]),{1:[2,1]},o($V3,[2,2]),{9:[1,11]},{13:[1,12]},{2:$V4,8:$V5,10:13,14:14,15:15,18:$V6,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($V3,[2,5]),{2:$V4,8:$V5,11:[1,24],14:25,15:15,18:$V6,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($Vc,$Vd),{2:$Ve,8:$Vf,16:26,68:27},{2:$Vg,13:$Vh,17:30,19:$Vi,50:$Vj,51:$Vk,69:$Vl},{8:[1,37]},o($Vc,[2,12]),o($Vd,[2,77]),o($Vd,[2,78]),o($Vd,[2,79]),o($Vd,[2,80]),o($Vd,[2,81]),o($V3,[2,4]),o($Vc,[2,7]),{2:$Vg,13:$Vh,17:38,19:$Vi,24:$Vm,50:$Vj,51:$Vk,69:$Vl},o($Vn,[2,83]),o($Vn,[2,84]),o($Vn,[2,85]),o($Vc,[2,10]),o($Vo,[2,86]),{8:$Vp,19:$Vq,36:40,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($Vy,$Vz,{23:50,20:51,25:52,15:53,2:$VA,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb}),{13:[1,55]},{13:[1,56]},o($Vo,[2,91]),{19:[1,57]},o($Vc,[2,9]),{2:$Ve,8:$Vf,68:58},{13:[1,59],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{8:$Vp,19:$Vq,36:66,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{71:[1,67]},o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102],{19:[1,68]}),o($VH,[2,103]),o($VH,[2,104]),o($VH,[2,105]),o($VH,[2,106]),o($Vo,[2,88]),{21:[1,69],24:$VI},o($Vy,[2,15]),{8:[1,71]},o($Vy,[2,18]),o($Vo,[2,89]),o($Vo,[2,90]),o($Vy,$Vz,{25:52,15:53,20:72,2:$VA,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb}),o($Vn,[2,82]),o($Vo,[2,87]),{8:$Vp,19:$Vq,36:73,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:74,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:75,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:76,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:77,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:78,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{21:$VJ,70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},o($VH,[2,93]),{2:$VK,8:$Vp,19:$VL,21:[2,109],28:83,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:80,83:81,84:82},{9:[1,88]},{2:$VA,15:53,25:89,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($Vy,[2,17]),{21:[1,90],24:$VI},o($VH,[2,94]),o($VH,[2,95]),o($VN,[2,96],{72:$VC,73:$VD}),o($VN,[2,97],{72:$VC,73:$VD}),o($VO,[2,98],{72:$VC,73:$VD,74:$VE,75:$VF}),o($VO,[2,99],{72:$VC,73:$VD,74:$VE,75:$VF}),o($VH,[2,92]),{21:[1,91]},{21:[2,108],24:[1,92]},o($Vy,[2,111]),o($Vy,[2,112],{54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW}),{2:$VK,8:$Vp,19:$VL,28:101,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($VX,$VY,{70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG}),{2:$VK,8:$Vp,19:$VL,28:102,36:103,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($VX,[2,76]),{2:$VZ,8:$V_,15:107,22:104,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($Vy,[2,14]),{9:[1,119]},o($VH,[2,107]),{2:$VK,8:$Vp,19:$VL,28:83,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,84:120},{2:$VK,8:$Vp,19:$VL,28:121,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VK,8:$Vp,19:$VL,28:122,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VK,8:$Vp,19:$VL,28:123,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VK,8:$Vp,19:$VL,28:124,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VK,8:$Vp,19:$VL,28:125,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VK,8:$Vp,19:$VL,28:126,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VK,8:$Vp,19:$VL,28:127,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VK,8:$Vp,19:$VL,28:128,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($VX,[2,73]),{21:[1,129],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},o([54,55,56,57,58,59,60,61],$VY,{21:$VJ,70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG}),{2:$VZ,8:$V_,11:[1,130],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($V91,[2,20]),{19:[1,132]},{2:$Ve,8:$Vf,16:133,68:27},{2:$Vg,13:$Vh,17:134,19:$Vi,50:$Vj,51:$Vk,69:$Vl},{19:[1,135]},{9:[1,136]},{19:[1,137]},{19:[1,138]},{19:[1,139]},{19:[1,140]},{13:[1,141]},{13:[1,142]},{8:$Vp,13:$Va1,19:$Vq,36:144,43:143,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($V91,[2,33]),{2:$VZ,8:$V_,15:107,22:146,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($Vy,[2,110]),o($Vb1,[2,65],{55:$VQ,57:$VS,60:$VV,61:$VW}),o($Vc1,[2,66],{60:$VV,61:$VW}),o($Vb1,[2,67],{55:$VQ,57:$VS,60:$VV,61:$VW}),o($Vc1,[2,68],{60:$VV,61:$VW}),o($Vd1,[2,69],{54:$VP,55:$VQ,56:$VR,57:$VS,60:$VV,61:$VW}),o($Vd1,[2,70],{54:$VP,55:$VQ,56:$VR,57:$VS,60:$VV,61:$VW}),o($VX,[2,71]),o($VX,[2,72]),o($VX,[2,75]),o($Vo,[2,13]),o($V91,[2,19]),{2:$VK,8:$Vp,19:$VL,28:147,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$Vg,13:$Vh,17:148,19:$Vi,24:$Vm,50:$Vj,51:$Vk,69:$Vl},o($V91,[2,23]),{2:$VK,8:$Vp,19:$VL,28:149,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VZ,8:$V_,15:107,22:150,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$Ve1,8:$Vf1,15:152,33:151,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{8:$Vp,19:$Vq,36:155,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:156,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:157,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($V91,[2,30]),o($V91,[2,31]),o($V91,[2,32]),{13:[1,158],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},o($V91,[2,54]),{2:$VZ,8:$V_,11:[1,159],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{21:[1,160],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},o($V91,[2,22]),{21:[1,161],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},{2:$VZ,8:$V_,11:[1,162],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VK,8:$Vp,19:$VL,28:163,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$Ve,8:$Vf,16:164,68:27},{2:$Vg,13:$Vh,17:165,19:$Vi,50:$Vj,51:$Vk,69:$Vl},o($Vg1,[2,59]),{21:[1,166],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{21:[1,167],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{21:[1,168],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},o($V91,[2,53]),o($Vc,[2,11]),{9:[1,169]},{9:[1,170]},{30:[1,171]},{13:[1,172],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},{2:$Vg,13:$Vh,17:173,19:$Vi,24:$Vm,50:$Vj,51:$Vk,69:$Vl},o($Vg1,[2,58]),{9:[1,174]},{13:[1,175]},{13:[1,176]},{2:$VZ,8:$V_,15:107,22:177,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VZ,8:$V_,15:107,22:178,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{19:[1,179]},{8:[1,180]},o($Vg1,[2,57]),{2:$Vh1,37:181,44:182,45:$Vi1,48:$Vj1},o($V91,[2,28]),o($V91,[2,29]),{2:$VZ,8:$V_,11:[1,186],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VZ,8:$V_,11:[1,187],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VK,8:$Vp,19:$VL,28:188,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{34:189,50:$Vk1,51:$Vl1},{2:$Vh1,11:[1,192],44:193,45:$Vi1,48:$Vj1},o($Vm1,[2,35]),{8:$Vp,19:$Vq,36:194,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{46:[1,195]},o($Vm1,[2,38]),o($V91,$Vn1,{29:196,52:$Vo1}),o($V91,[2,24]),{21:[1,198],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},{21:[1,199]},{21:[2,55]},{21:[2,56]},o($V91,[2,27]),o($Vm1,[2,34]),{46:[1,200],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{2:$Vp1,8:$Vq1,15:204,27:$Vr1,30:$Vs1,31:$Vt1,32:$Vu1,35:$Vv1,38:$Vw1,39:$Vx1,40:$Vy1,42:$Vz1,47:201,49:202,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($V91,[2,21]),{2:[1,218],9:[1,216],27:[1,217],53:215},{13:[1,219]},{9:[1,220]},{2:$Vp1,8:$Vq1,15:204,27:$Vr1,30:$Vs1,31:$Vt1,32:$Vu1,35:$Vv1,38:$Vw1,39:$Vx1,40:$Vy1,42:$Vz1,47:221,49:202,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$Vp1,8:$Vq1,15:204,27:$Vr1,30:$Vs1,31:$Vt1,32:$Vu1,35:$Vv1,38:$Vw1,39:$Vx1,40:$Vy1,41:[1,222],42:$Vz1,49:223,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($VA1,[2,40]),{19:[1,224]},{2:$Ve,8:$Vf,16:225,68:27},{2:$Vg,13:$Vh,17:226,19:$Vi,50:$Vj,51:$Vk,69:$Vl},{19:[1,227]},{9:[1,228]},{19:[1,229]},{19:[1,230]},{19:[1,231]},{19:[1,232]},{13:[1,233]},{8:$Vp,13:$Va1,19:$Vq,36:144,43:234,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($VA1,[2,52]),o($V91,[2,60]),{2:$VZ,8:$V_,15:107,22:235,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{19:[1,236]},o($V91,[2,64]),o($V91,[2,25]),{2:$VZ,8:$V_,15:107,22:237,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$Vp1,8:$Vq1,15:204,27:$Vr1,30:$Vs1,31:$Vt1,32:$Vu1,35:$Vv1,38:$Vw1,39:$Vx1,40:$Vy1,41:[1,238],42:$Vz1,49:223,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{13:[1,239]},o($VA1,[2,39]),{2:$VK,8:$Vp,19:$VL,28:240,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$Vg,13:$Vh,17:241,19:$Vi,24:$Vm,50:$Vj,51:$Vk,69:$Vl},o($VA1,[2,43]),{2:$VK,8:$Vp,19:$VL,28:242,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$V4,8:$V5,10:243,14:14,15:15,18:$V6,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$Ve1,8:$Vf1,15:152,33:244,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{8:$Vp,19:$Vq,36:245,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:246,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:$Vp,19:$Vq,36:247,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($VA1,[2,50]),o($VA1,[2,51]),{2:$VZ,8:$V_,11:[1,248],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VK,8:$Vp,19:$VL,28:249,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{2:$VZ,8:$V_,11:[1,250],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{13:[1,251]},o($Vm1,[2,37]),{21:[1,252],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},o($VA1,[2,42]),{21:[1,253],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},{2:$V4,8:$V5,11:[1,254],14:25,15:15,18:$V6,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VK,8:$Vp,19:$VL,28:255,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{21:[1,256],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{21:[1,257],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{21:[1,258],70:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},o($V91,[2,62]),{21:[1,259],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},o($V91,[2,26]),o($Vm1,[2,36]),{9:[1,260]},{9:[1,261]},{30:[1,262]},{13:[1,263],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},{11:[1,264]},{13:[1,265]},{13:[1,266]},{9:[1,267]},{2:$VZ,8:$V_,15:107,22:268,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VZ,8:$V_,15:107,22:269,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{19:[1,270]},{8:[1,271]},{2:$Vh1,37:272,44:182,45:$Vi1,48:$Vj1},o($VA1,[2,48]),o($VA1,[2,49]),{2:$VZ,8:$V_,15:107,22:273,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VZ,8:$V_,11:[1,274],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VZ,8:$V_,11:[1,275],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VK,8:$Vp,19:$VL,28:276,36:85,62:$VM,70:$Vr,71:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{34:277,50:$Vk1,51:$Vl1},{2:$Vh1,9:[1,278],44:193,45:$Vi1,48:$Vj1},{2:$VZ,8:$V_,11:[1,279],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($VA1,$Vn1,{29:280,52:$Vo1}),o($VA1,[2,44]),{21:[1,281],54:$VP,55:$VQ,56:$VR,57:$VS,58:$VT,59:$VU,60:$VV,61:$VW},{21:[1,282]},o($VA1,[2,47]),o($V91,$Vn1,{29:283,52:$Vo1}),o($VA1,[2,41]),{13:[1,284]},{9:[1,285]},o($V91,[2,63]),o($VA1,[2,45]),{2:$VZ,8:$V_,15:107,22:286,26:105,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},{2:$VZ,8:$V_,11:[1,287],15:107,26:131,27:$V$,30:$V01,31:$V11,32:$V21,35:$V31,38:$V41,39:$V51,40:$V61,41:$V71,42:$V81,63:$V7,64:$V8,65:$V9,66:$Va,67:$Vb},o($VA1,[2,46])],
defaultActions: {7:[2,1],190:[2,55],191:[2,56]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
        let CErrores=require('../JavaAST/Errores');
        let CNodoError=require('../JavaAST/NodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'timprime';
break;
case 4:return 'rnumero';
break;
case 5:return 64;
break;
case 6:return 63;
break;
case 7:return 65;
break;
case 8:return 66;
break;
case 9:return 67;
break;
case 10:return 51;
break;
case 11:return 50;
break;
case 12:return 58;
break;
case 13:return 69;
break;
case 14:return 76;
break;
case 15:return 70;
break;
case 16:return 75;
break;
case 17:return 74;
break;
case 18:return 72;
break;
case 19:return 73;
break;
case 20:return 55;
break;
case 21:return 57;
break;
case 22:return 59;
break;
case 23:return 54;
break;
case 24:return 56;
break;
case 25:return 60;
break;
case 26:return 61;
break;
case 27:return 39;
break;
case 28:return 38;
break;
case 29:return 40;
break;
case 30:return 62;
break;
case 31:return 7;
break;
case 32:return 12;
break;
case 33:return 27;
break;
case 34:return 52;
break;
case 35:return 35;
break;
case 36:return 45;
break;
case 37:return 48;
break;
case 38:return 30;
break;
case 39:return 31;
break;
case 40:return 32;
break;
case 41:return 41;
break;
case 42:return 42;
break;
case 43:return 18;
break;
case 44:return'ttrue';
break;
case 45:return'tfalse';
break;
case 46:return 46;
break;
case 47:return 13;
break;
case 48:return 24;
break;
case 49:return 9;
break;
case 50:return 11;
break;
case 51:return 19;
break;
case 52:return 21;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 79; 
break;
case 55:return 77;
break;
case 56:return 71;
break;
case 57:return 8;
break;
case 58:return 5;
break;
case 59:CErrores.Errores.add(new CNodoError.NodoError("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno,yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:imprimir\b)/,/^(?:numero\b)/,/^(?:String\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:--)/,/^(?:\+\+)/,/^(?:==)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:continue\b)/,/^(?:!)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJava;
exports.Parser = GramaticaJava.Parser;
exports.parse = function () { return GramaticaJava.parse.apply(GramaticaJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}